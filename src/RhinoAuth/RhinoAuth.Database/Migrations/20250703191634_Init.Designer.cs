// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RhinoAuth.Database;

#nullable disable

namespace RhinoAuth.Database.Migrations
{
    [DbContext(typeof(RhinoDbContext))]
    [Migration("20250703191634_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Xml")
                        .HasColumnType("text")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BackchannelLogoutUri")
                        .HasColumnType("text")
                        .HasColumnName("backchannel_logout_uri");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LoginCallbackUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login_callback_uri");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("LogoutCallbackUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logout_callback_uri");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<bool>("ShowConsent")
                        .HasColumnType("boolean")
                        .HasColumnName("show_consent");

                    b.Property<bool>("SupportsEcdsa")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_ecdsa");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_api_clients");

                    b.ToTable("api_clients", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClientHttpCall", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ApiClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExternalLoginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_login_id");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("text")
                        .HasColumnName("response_body");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("integer")
                        .HasColumnName("response_code");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_api_client_http_call");

                    b.HasIndex("ApiClientId")
                        .HasDatabaseName("ix_api_client_http_call_api_client_id");

                    b.HasIndex("ExternalLoginId")
                        .HasDatabaseName("ix_api_client_http_call_external_login_id");

                    b.ToTable("api_client_http_call", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClientResource", b =>
                {
                    b.Property<string>("ApiClientId")
                        .HasColumnType("text")
                        .HasColumnName("api_client_id");

                    b.Property<string>("ApiResourceId")
                        .HasColumnType("text")
                        .HasColumnName("api_resource_id");

                    b.PrimitiveCollection<List<string>>("AllowedScopes")
                        .HasColumnType("text[]")
                        .HasColumnName("allowed_scopes");

                    b.HasKey("ApiClientId", "ApiResourceId")
                        .HasName("pk_api_client_resources");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_client_resources_api_resource_id");

                    b.ToTable("api_client_resources", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClientTokenRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<string>("ApiClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsRefreshTokenUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refresh_token_used");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<string>("RefreshedBy")
                        .HasColumnType("text")
                        .HasColumnName("refreshed_by");

                    b.PrimitiveCollection<List<string>>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_api_client_token_requests");

                    b.HasIndex("ApiClientId")
                        .HasDatabaseName("ix_api_client_token_requests_api_client_id");

                    b.ToTable("api_client_token_requests", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.PrimitiveCollection<List<string>>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<string>("SymmetricJwtSecret")
                        .HasColumnType("text")
                        .HasColumnName("symmetric_jwt_secret");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_api_resources");

                    b.ToTable("api_resources", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.AppClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_app_claims");

                    b.ToTable("app_claims", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.AppJsonWebKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Curve")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("curve");

                    b.Property<string>("D")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("d");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("X")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x");

                    b.Property<string>("Y")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("y");

                    b.HasKey("Id")
                        .HasName("pk_app_json_web_keys");

                    b.ToTable("app_json_web_keys", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.AuthorizeRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApiClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_client_id");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_challenge");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTimeOffset?>("ConsentedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consented_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login_id");

                    b.Property<string>("Nonce")
                        .HasColumnType("text")
                        .HasColumnName("nonce");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer")
                        .HasColumnName("request_type");

                    b.PrimitiveCollection<List<string>>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("VerifierMethod")
                        .HasColumnType("integer")
                        .HasColumnName("verifier_method");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_authorize_requests");

                    b.HasIndex("ApiClientId")
                        .HasDatabaseName("ix_authorize_requests_api_client_id");

                    b.HasIndex("LoginId")
                        .HasDatabaseName("ix_authorize_requests_login_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_authorize_requests_user_id");

                    b.ToTable("authorize_requests", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.AuthorizeRequestApiResource", b =>
                {
                    b.Property<string>("AuthorizeRequestId")
                        .HasColumnType("text")
                        .HasColumnName("authorize_request_id");

                    b.Property<string>("ApiResourceId")
                        .HasColumnType("text")
                        .HasColumnName("api_resource_id");

                    b.HasKey("AuthorizeRequestId", "ApiResourceId")
                        .HasName("pk_authorize_request_api_resource");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_authorize_request_api_resource_api_resource_id");

                    b.ToTable("authorize_request_api_resource", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("AllowIpLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_ip_login");

                    b.Property<bool>("AllowIpResgistration")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_ip_resgistration");

                    b.Property<bool>("AllowPhoneNumberLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_phone_number_login");

                    b.Property<bool>("AllowPhoneNumberResgistration")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_phone_number_resgistration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PhoneCode")
                        .HasColumnType("integer")
                        .HasColumnName("phone_code");

                    b.HasKey("Code")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ExternalLogin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<string>("ApiClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IdToken")
                        .HasColumnType("text")
                        .HasColumnName("id_token");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login_id");

                    b.PrimitiveCollection<List<string>>("OpenIdScopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("open_id_scopes");

                    b.Property<string>("PreviousRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("previous_refresh_token");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_external_logins");

                    b.HasIndex("ApiClientId")
                        .HasDatabaseName("ix_external_logins_api_client_id");

                    b.HasIndex("LoginId")
                        .HasDatabaseName("ix_external_logins_login_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_external_logins_user_id");

                    b.ToTable("external_logins", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ExternalLoginApiResource", b =>
                {
                    b.Property<string>("ExternalLoginId")
                        .HasColumnType("text")
                        .HasColumnName("external_login_id");

                    b.Property<string>("ApiResourceId")
                        .HasColumnType("text")
                        .HasColumnName("api_resource_id");

                    b.HasKey("ExternalLoginId", "ApiResourceId")
                        .HasName("pk_external_login_api_resource");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_external_login_api_resource_api_resource_id");

                    b.ToTable("external_login_api_resource", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.Login", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<string>("EndedByExternalLoginId")
                        .HasColumnType("text")
                        .HasColumnName("ended_by_external_login_id");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<IPAddress>("LogoutIpAddress")
                        .HasColumnType("inet")
                        .HasColumnName("logout_ip_address");

                    b.Property<bool>("Successful")
                        .HasColumnType("boolean")
                        .HasColumnName("successful");

                    b.Property<long?>("TotpWindow")
                        .HasColumnType("bigint")
                        .HasColumnName("totp_window");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_logins_user_id");

                    b.ToTable("logins", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.OneTimeCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_attempts");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_one_time_codes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_one_time_codes_user_id");

                    b.ToTable("one_time_codes", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.RoleClaim", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<string>("ClaimId")
                        .HasColumnType("text")
                        .HasColumnName("claim_id");

                    b.HasKey("RoleId", "ClaimId")
                        .HasName("pk_role_claims");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_role_claims_claim_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.SignupRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<int>("CountryPhoneCode")
                        .HasColumnType("integer")
                        .HasColumnName("country_phone_code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerificationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_verification_code");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_attempts");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("SmsVerificationCode")
                        .HasColumnType("text")
                        .HasColumnName("sms_verification_code");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_signup_requests");

                    b.HasIndex("CountryCode")
                        .HasDatabaseName("ix_signup_requests_country_code");

                    b.ToTable("signup_requests", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.TokenRequestApiResource", b =>
                {
                    b.Property<string>("TokenRequestId")
                        .HasColumnType("text")
                        .HasColumnName("token_request_id");

                    b.Property<string>("ApiResourceId")
                        .HasColumnType("text")
                        .HasColumnName("api_resource_id");

                    b.HasKey("TokenRequestId", "ApiResourceId")
                        .HasName("pk_token_request_api_resource");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_token_request_api_resource_api_resource_id");

                    b.ToTable("token_request_api_resource", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTimeOffset?>("BlockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("blocked_at");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<int>("CountryPhoneCode")
                        .HasColumnType("integer")
                        .HasColumnName("country_phone_code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_id");

                    b.Property<Dictionary<string, string>>("DomainAttributes")
                        .HasColumnType("hstore")
                        .HasColumnName("domain_attributes");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTimeOffset?>("LockoutEndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_ends_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("TotpSecret")
                        .HasColumnType("text")
                        .HasColumnName("totp_secret");

                    b.Property<string>("UnverifiedCountryCode")
                        .HasColumnType("text")
                        .HasColumnName("unverified_country_code");

                    b.Property<int?>("UnverifiedCountryPhoneCode")
                        .HasColumnType("integer")
                        .HasColumnName("unverified_country_phone_code");

                    b.Property<string>("UnverifiedEmail")
                        .HasColumnType("text")
                        .HasColumnName("unverified_email");

                    b.Property<string>("UnverifiedPhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("unverified_phone_number");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CountryCode")
                        .HasDatabaseName("ix_users_country_code");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_users_creator_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.HasIndex("PhoneNumber", "CountryPhoneCode")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone_number_country_phone_code");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.UserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClientHttpCall", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiClient", "ApiClient")
                        .WithMany("ApiClientHttpCalls")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_client_http_call_api_clients_api_client_id");

                    b.HasOne("RhinoAuth.Database.ExternalLogin", "External")
                        .WithMany("ApiClientHttpCalls")
                        .HasForeignKey("ExternalLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_client_http_call_external_logins_external_login_id");

                    b.Navigation("ApiClient");

                    b.Navigation("External");
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClientResource", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiClient", "ApiClient")
                        .WithMany("ApiClientResources")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_client_resources_api_clients_api_client_id");

                    b.HasOne("RhinoAuth.Database.ApiResource", "ApiResource")
                        .WithMany("ApiClientResources")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_client_resources_api_resources_api_resource_id");

                    b.Navigation("ApiClient");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClientTokenRequest", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiClient", "ApiClient")
                        .WithMany("TokenRequests")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_client_token_requests_api_clients_api_client_id");

                    b.Navigation("ApiClient");
                });

            modelBuilder.Entity("RhinoAuth.Database.AuthorizeRequest", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiClient", "ApiClient")
                        .WithMany("AuthorizeRequests")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorize_requests_api_clients_api_client_id");

                    b.HasOne("RhinoAuth.Database.Login", "Login")
                        .WithMany("OauthRequests")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorize_requests_logins_login_id");

                    b.HasOne("RhinoAuth.Database.User", "User")
                        .WithMany("OauthRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorize_requests_users_user_id");

                    b.Navigation("ApiClient");

                    b.Navigation("Login");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhinoAuth.Database.AuthorizeRequestApiResource", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiResource", "ApiResource")
                        .WithMany("AuthorizeRequestApiResources")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorize_request_api_resource_api_resources_api_resource_id");

                    b.HasOne("RhinoAuth.Database.AuthorizeRequest", "Authorize")
                        .WithMany("AuthorizeRequestApiResources")
                        .HasForeignKey("AuthorizeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorize_request_api_resource_authorize_requests_authorize");

                    b.Navigation("ApiResource");

                    b.Navigation("Authorize");
                });

            modelBuilder.Entity("RhinoAuth.Database.ExternalLogin", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiClient", "ApiClient")
                        .WithMany("ExternalLogins")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_logins_api_clients_api_client_id");

                    b.HasOne("RhinoAuth.Database.Login", "Login")
                        .WithMany("ExternalLogins")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_logins_logins_login_id");

                    b.HasOne("RhinoAuth.Database.User", "User")
                        .WithMany("ExternalLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_logins_users_user_id");

                    b.Navigation("ApiClient");

                    b.Navigation("Login");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhinoAuth.Database.ExternalLoginApiResource", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiResource", "ApiResource")
                        .WithMany("ExternalLoginApiResources")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_login_api_resource_api_resources_api_resource_id");

                    b.HasOne("RhinoAuth.Database.ExternalLogin", "External")
                        .WithMany("ExternalLoginApiResources")
                        .HasForeignKey("ExternalLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_login_api_resource_external_logins_external_login_");

                    b.Navigation("ApiResource");

                    b.Navigation("External");
                });

            modelBuilder.Entity("RhinoAuth.Database.Login", b =>
                {
                    b.HasOne("RhinoAuth.Database.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_logins_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhinoAuth.Database.OneTimeCode", b =>
                {
                    b.HasOne("RhinoAuth.Database.User", "User")
                        .WithMany("OneTimeCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_one_time_codes_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhinoAuth.Database.RoleClaim", b =>
                {
                    b.HasOne("RhinoAuth.Database.AppClaim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_app_claims_claim_id");

                    b.HasOne("RhinoAuth.Database.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RhinoAuth.Database.SignupRequest", b =>
                {
                    b.HasOne("RhinoAuth.Database.Country", "Country")
                        .WithMany("SignupRequests")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_signup_requests_countries_country_code");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RhinoAuth.Database.TokenRequestApiResource", b =>
                {
                    b.HasOne("RhinoAuth.Database.ApiResource", "ApiResource")
                        .WithMany("TokenRequestApiResources")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_request_api_resource_api_resources_api_resource_id");

                    b.HasOne("RhinoAuth.Database.ApiClientTokenRequest", "TokenRequest")
                        .WithMany("TokenRequestApiResources")
                        .HasForeignKey("TokenRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_request_api_resource_api_client_token_requests_token_");

                    b.Navigation("ApiResource");

                    b.Navigation("TokenRequest");
                });

            modelBuilder.Entity("RhinoAuth.Database.User", b =>
                {
                    b.HasOne("RhinoAuth.Database.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_countries_country_code");

                    b.HasOne("RhinoAuth.Database.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("fk_users_users_creator_id");

                    b.OwnsMany("RhinoAuth.Database.User+ProfileUpdate", "ProfileUpdateHistory", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Avatar")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId", "__synthesizedOrdinal");

                            b1.ToTable("users");

                            b1.ToJson("profile_update_history");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_user_id");
                        });

                    b.Navigation("Country");

                    b.Navigation("Creator");

                    b.Navigation("ProfileUpdateHistory");
                });

            modelBuilder.Entity("RhinoAuth.Database.UserRole", b =>
                {
                    b.HasOne("RhinoAuth.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("RhinoAuth.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClient", b =>
                {
                    b.Navigation("ApiClientHttpCalls");

                    b.Navigation("ApiClientResources");

                    b.Navigation("AuthorizeRequests");

                    b.Navigation("ExternalLogins");

                    b.Navigation("TokenRequests");
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiClientTokenRequest", b =>
                {
                    b.Navigation("TokenRequestApiResources");
                });

            modelBuilder.Entity("RhinoAuth.Database.ApiResource", b =>
                {
                    b.Navigation("ApiClientResources");

                    b.Navigation("AuthorizeRequestApiResources");

                    b.Navigation("ExternalLoginApiResources");

                    b.Navigation("TokenRequestApiResources");
                });

            modelBuilder.Entity("RhinoAuth.Database.AppClaim", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("RhinoAuth.Database.AuthorizeRequest", b =>
                {
                    b.Navigation("AuthorizeRequestApiResources");
                });

            modelBuilder.Entity("RhinoAuth.Database.Country", b =>
                {
                    b.Navigation("SignupRequests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("RhinoAuth.Database.ExternalLogin", b =>
                {
                    b.Navigation("ApiClientHttpCalls");

                    b.Navigation("ExternalLoginApiResources");
                });

            modelBuilder.Entity("RhinoAuth.Database.Login", b =>
                {
                    b.Navigation("ExternalLogins");

                    b.Navigation("OauthRequests");
                });

            modelBuilder.Entity("RhinoAuth.Database.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RhinoAuth.Database.User", b =>
                {
                    b.Navigation("ExternalLogins");

                    b.Navigation("Logins");

                    b.Navigation("OauthRequests");

                    b.Navigation("OneTimeCodes");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
